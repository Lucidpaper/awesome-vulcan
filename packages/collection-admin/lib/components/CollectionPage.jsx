/**
 * Generic page for a collection
 * Must be handled by the parent :
 * - providing the documents and callbacks
 */

import React from "react";
import {
  Components,
  Loading,
  registerComponent,
  withCurrentUser
} from "meteor/vulcan:core";
import { FormattedMessage } from "meteor/vulcan:i18n";
import { Link } from "react-router";
import PlusIcon from "mdi-material-ui/Plus";
import CheckIcon from "mdi-material-ui/Check";
import HelpIcon from "mdi-material-ui/Help";
import EyeOutlineIcon from "mdi-material-ui/EyeOutline";
import PencilIcon from "mdi-material-ui/Pencil";

import Typography from "@material-ui/core/Typography";
import IconButton from "@material-ui/core/IconButton";

import moment from "moment";

/**
 * Built sensible columns from the schema
 * @param {*} displayedSchemaFields
 */
const buildDefaultColumns = (schema, displayedFields) =>
  displayedFields.map(field => {
    let component;
    switch (schema[field].control) {
      // TODO: do the same with 'User'
      case "datetime":
        component = ({ document }) => {
          const date = document[field];
          return (
            <div>
              <div>{moment(date).format("dddd DD/MM/YYYY à HH:mm")}</div>
              <div>
                {moment.duration(moment(date).diff(moment())).humanize(true)}
              </div>
            </div>
          );
        };
        break;
      case "checkdiv":
        component = ({ document }) => {
          if (document[field] === true)
            return (
              <span>
                <CheckIcon />
                Oui
              </span>
            );
          if (document[field] === false) return <span>Non</span>;
          return (
            <span>
              <HelpIcon />
              Inconnu
            </span>
          );
        };
        break;
      default:
        component = undefined;
    }
    return {
      name: field,
      component
    };
  });

const buildActionsColumn = ({
  collection,
  name = "Actions",
  baseRoute,
  editRoute
}) => ({
  name,
  component: ({ document, currentUser }) => {
    return (
      <div justify="space-around" align="center">
        <Link to={`${baseRoute}/${document._id}`}>
          <IconButton variant="fab" color="primary">
            <EyeOutlineIcon />
          </IconButton>
        </Link>
        {collection.options.mutations.edit.check(currentUser, document) ? (
          <Link to={`${baseRoute}/${document._id}${editRoute}`}>
            <IconButton variant="fab" color="primary">
              <PencilIcon />
            </IconButton>
          </Link>
        ) : null}
      </div>
    );
  }
});

const getCollectionSchema = collection => collection.options.schema;
const getDefaultColumns = collection =>
  Object.keys(getCollectionSchema(collection));
export const CollectionPage = ({
  results = [],
  currentUser,
  loading,
  collection,
  options,
  terms = {},
  sort,
  baseRoute, // eg /customers
  newRoute = "/new", // relative to the baseRoute,
  editRoute = "/edit", // relative to the baseRoute
  addText = "Ajouter",
  tableHeaderText, // collection name
  basicColumns, // autogenerated columns
  customColumns = [], // already customized columns
  check
}) => (
  <Components.ShowIf
    check={typeof check !== "undefined" ? check : () => true}
    document={currentUser}
    failureComponent={
      <div>
        <div px={16} py={24}>
          <FormattedMessage id="app.noPermission" />
        </div>
      </div>
    }
  >
    <div direction="column" style={{ width: "100%" }}>
      {collection.options.mutations.new.check(currentUser) ? (
        <div px={16} py={24}>
          <Link to={`${baseRoute}${newRoute}`}>
            <Components.Button variant="contained" color="secondary">
              <PlusIcon />
              {addText}
            </Components.Button>
          </Link>
        </div>
      ) : null}
      <div>
        <Typography variant="title" color="inherit" className="tagline">
          {tableHeaderText || collection.typeName || collection._name}
        </Typography>
        {loading ? (
          <Loading />
        ) : (
          <div>
            {results.length ? (
              <div>
                <Components.Datatable
                  collection={collection}
                  options={options}
                  terms={terms}
                  showEdit={false}
                  sort={sort}
                  columns={[
                    // generate the default columns for non specific columns
                    ...buildDefaultColumns(
                      collection.options.schema,
                      basicColumns || getDefaultColumns(collection)
                    ),
                    ...customColumns,
                    buildActionsColumn({
                      name: "Actions",
                      collection,
                      editRoute,
                      baseRoute
                    })
                  ]}
                />
              </div>
            ) : (
              <span>Aucune donnée à afficher pour le moment</span>
            )}
          </div>
        )}
      </div>
    </div>
  </Components.ShowIf>
);

export default CollectionPage;
registerComponent("CollectionPage", CollectionPage, withCurrentUser);
